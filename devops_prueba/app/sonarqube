pipeline {
    agent any

    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    sh 'python3 -m venv venv'
                    sh './venv/bin/pip install --upgrade pip'
                    sh './venv/bin/pip install pytest flask'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    sh './venv/bin/pytest devops_prueba/app/test.py --junitxml=report.xml'
                }
            }
        }

        stage('SonarQube Code Analysis') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                dir("${WORKSPACE}") {
                    script {
                        withSonarQubeEnv('SonarQubeScanner') { 
                            sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=your_project_key \
                            -Dsonar.projectName=your_project_name \
                            -Dsonar.projectVersion=1.0-SNAPSHOT \
                            -Dsonar.sources=devops_prueba/app \
                            -Dsonar.sourceEncoding=UTF-8
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            junit 'report.xml'
        }
    }
}
