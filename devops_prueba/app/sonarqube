pipeline {
    agent any

    environment {
        SCANNER_HOME = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    // Crear un entorno virtual
                    sh 'python3 -m venv venv'
                    // Activar el entorno virtual y actualizar pip
                    sh './venv/bin/pip install --upgrade pip'
                    // Instalar pytest y Flask en el entorno virtual
                    sh './venv/bin/pip install pytest flask'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    // Ejecutar pruebas unitarias dentro del entorno virtual
                    sh './venv/bin/pytest devops_prueba/app/test.py --junitxml=report.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // Asume que tu servidor SonarQube está configurado con el nombre 'SonarQube'
                    script {
                        // Ejecutar el análisis de SonarQube
                        sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=your_project_key -Dsonar.sources=devops_prueba/app -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN}"
                    }
                }
            }
        }
    }

    post {
        always {
            junit 'report.xml' // Publicar resultados de las pruebas unitarias
        }
        success {
            script {
                // Esperar a que el análisis de SonarQube se complete
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
